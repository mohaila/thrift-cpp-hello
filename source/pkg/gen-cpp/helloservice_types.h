/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef helloservice_TYPES_H
#define helloservice_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace helloservice {

struct ExceptionError {
  enum type {
    InvalidVersion = 1,
    InvalidRequest = 2
  };
};

extern const std::map<int, const char*> _ExceptionError_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ExceptionError::type& val);

class HelloRequest;

class HelloResponse;

class InvalidOperation;

typedef struct _HelloRequest__isset {
  _HelloRequest__isset() : version(true), name(false) {}
  bool version :1;
  bool name :1;
} _HelloRequest__isset;

class HelloRequest : public virtual ::apache::thrift::TBase {
 public:

  HelloRequest(const HelloRequest&);
  HelloRequest& operator=(const HelloRequest&);
  HelloRequest() : version(1), name() {
  }

  virtual ~HelloRequest() throw();
  int32_t version;
  std::string name;

  _HelloRequest__isset __isset;

  void __set_version(const int32_t val);

  void __set_name(const std::string& val);

  bool operator == (const HelloRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const HelloRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HelloRequest &a, HelloRequest &b);

std::ostream& operator<<(std::ostream& out, const HelloRequest& obj);

typedef struct _HelloResponse__isset {
  _HelloResponse__isset() : version(true), message(false) {}
  bool version :1;
  bool message :1;
} _HelloResponse__isset;

class HelloResponse : public virtual ::apache::thrift::TBase {
 public:

  HelloResponse(const HelloResponse&);
  HelloResponse& operator=(const HelloResponse&);
  HelloResponse() : version(1), message() {
  }

  virtual ~HelloResponse() throw();
  int32_t version;
  std::string message;

  _HelloResponse__isset __isset;

  void __set_version(const int32_t val);

  void __set_message(const std::string& val);

  bool operator == (const HelloResponse & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const HelloResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HelloResponse &a, HelloResponse &b);

std::ostream& operator<<(std::ostream& out, const HelloResponse& obj);

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : version(true), error(false) {}
  bool version :1;
  bool error :1;
} _InvalidOperation__isset;

class InvalidOperation : public ::apache::thrift::TException {
 public:

  InvalidOperation(const InvalidOperation&);
  InvalidOperation& operator=(const InvalidOperation&);
  InvalidOperation() : version(1), error((ExceptionError::type)0) {
  }

  virtual ~InvalidOperation() throw();
  int32_t version;
  ExceptionError::type error;

  _InvalidOperation__isset __isset;

  void __set_version(const int32_t val);

  void __set_error(const ExceptionError::type val);

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidOperation &a, InvalidOperation &b);

std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj);

} // namespace

#endif
